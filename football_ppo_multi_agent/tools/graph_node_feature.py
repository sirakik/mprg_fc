import torch
import numpy as np


'''
def ball_owner(o):
    """
    o[0]:not owner,  o[1]:left team, o[2]:right team
    return
    0: not owner, 1: left team, -1: right team
    """
    owner = np.argmax(o)
    if owner == 2:
        owner = -1

    return owner

def convert_to_node_features(state):
    node_state = torch.zeros(len(state), 9, 23).cuda()

    for i in range(len(state)):
        s = state[i]
        owner = ball_owner(s[94:97])
        gs = torch.argmax(s[108:115])

        b_x = s[88]
        b_y = s[89]
        b_z = s[90]

        node_state[i] = torch.tensor([
            [s[0], s[2], s[4], s[6], s[8], s[10], s[12], s[14], s[16], s[18], s[20], s[44], s[46], s[48], s[50], s[52], s[54], s[56], s[58], s[60], s[62], s[64], s[88]],
            [s[1], s[3], s[5], s[7], s[9], s[11], s[13], s[15], s[17], s[19], s[21], s[45], s[47], s[49], s[51], s[53], s[55], s[57], s[59], s[61], s[63], s[65], s[89]],
            [s[22], s[24], s[26], s[28], s[30], s[32], s[34], s[36], s[38], s[40], s[42], s[66], s[68], s[70], s[72], s[74], s[76], s[78], s[80], s[82], s[84], s[86], s[90]],
            [s[23], s[25], s[27], s[29], s[31], s[33], s[35], s[37], s[39], s[41], s[43], s[67], s[69], s[71], s[73], s[75], s[77], s[79], s[81], s[83], s[85], s[87], s[91]],
            [s[0] - b_x, s[2] - b_x, s[4] - b_x, s[6] - b_x, s[8] - b_x, s[10] - b_x, s[12] - b_x, s[14] - b_x, s[16] - b_x, s[18] - b_x, s[20] - b_x, s[44] - b_x, s[46] - b_x, s[48] - b_x, s[50] - b_x, s[52] - b_x, s[54] - b_x, s[56] - b_x, s[58] - b_x, s[60] - b_x, s[62] - b_x, s[64] - b_x, s[92]],
            [s[1] - b_y, s[3] - b_y, s[5] - b_y, s[7] - b_y, s[9] - b_y, s[11] - b_y, s[13] - b_y, s[15] - b_y, s[17] - b_y, s[19] - b_y, s[21] - b_y, s[45] - b_y, s[47] - b_y, s[49] - b_y, s[51] - b_y, s[53] - b_y, s[55] - b_y, s[57] - b_y, s[59] - b_y, s[61] - b_y, s[63] - b_y, s[65] - b_y, s[93]],
            [b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z, b_z,  b_z, owner],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0],
            [gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs, gs]
        ])

    return node_state
'''


'''
index_list = [[0,0], [1,0], [0,1], [1,1], [0,2], [1,2], [0,3], [1,3], [0,4], [1,4], [0,5], [1,5], [0,6], [1,6], [0,7], [1,7], [0,8], [1,8], [0,9], [1,9], [0,10], [1,10],
              [2,0], [3,0], [2,1], [3,1], [2,2], [3,2], [2,3], [3,3], [2,4], [3,4], [2,5], [3,5], [2,6], [3,6], [2,7], [3,7], [2,8], [3,8], [2,9], [3,9], [2,10], [3,10],
              [0,11], [1, 11], [0,12], [1,12], [0,13], [1,13], [0,14], [1,14], [0,15], [1,15], [0,16], [1,16], [0,17], [1,17], [0,18], [1,18], [0,19], [1,19], [0,20], [1,20], [0,21], [1,21],
              [2, 11], [3, 11], [2, 12], [3, 12], [2, 13], [3, 13], [2, 14], [3, 14], [2, 15], [3, 15], [2, 16], [3, 16], [2, 17], [3, 17], [2, 18], [3, 18], [2, 19], [3, 19], [2, 20], [3, 20], [2,21], [3,21]]
'''


class ConvertNodeFeature():
    def __init__(self, num_envs, device):
        self.list_x = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
                       2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 3,
                       2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]
        self.list_y = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4,
                       5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18,
                       18, 19, 19, 20, 20, 21, 21, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19,
                       19, 20, 20, 21, 21]
        self.cla = torch.tensor(
            [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0.]
        ).cuda(device)
        self.ball_x = [0, 1, 2, 3, 4, 5, 6]
        self.ball_z = [88, 89, 90, 91, 92, 93]

        self.device = device

    def ball_owner(self, o):
        owner = torch.tensor(torch.argmax(o, dim=1), dtype=torch.float)
        nega_ones = torch.full([len(o)], fill_value=-1, dtype=torch.float)
        owner = torch.where(owner == 2., nega_ones, owner)

        return owner.T

    def get_node_feature(self, state):
        node_state = torch.zeros(len(state), 9, 23).cuda(self.device)
        ones = torch.ones((len(state), 23)).cuda(self.device)
        ones_l = torch.ones((len(state), 1)).cuda(self.device)

        # player
        for i, (x, y) in enumerate(zip(self.list_x, self.list_y)):
            node_state[:, x, y] = state[:, i]
        node_state[:, 4, :] = node_state[:, 0, :] - state[:, 88].unsqueeze(1)  # distance ball x
        node_state[:, 5, :] = node_state[:, 1, :] - state[:, 89].unsqueeze(1)  # distance ball y
        node_state[:, 6, :] = ones * state[:, 90].unsqueeze(1)  # distance ball z
        node_state[:, 7, :] = ones_l * self.cla
        node_state[:, 8, :] = ones * torch.argmax(state[:, 108:115], dim=1).unsqueeze(1)  # game state

        # ball
        for x, z in zip(self.ball_x, self.ball_z):
            node_state[:, x, 22] = state[:, z]

        node_state[:, 6, 22] = self.ball_owner(state[:, 94:97])

        return node_state


if __name__ == '__main__':
    state = [-1.0110294e+00, -0.0000000e+00, 1.7821999e-10, 1.8731991e-02,
             -3.4891362e-10, -1.8735737e-02, -4.2665440e-01, -1.9894461e-01,
             -5.0631738e-01, -6.4667329e-02, -5.0551468e-01, 6.4592980e-02,
             -4.2612150e-01, 1.9869612e-01, -1.8624374e-01, -1.0739919e-01,
             -2.7072316e-01, -3.8140163e-06, -1.8624374e-01, 1.0739919e-01,
             -1.0110294e-02, -2.1961550e-01, 0.0000000e+00, -0.0000000e+00,
             2.5181918e-10, -2.5609892e-03, -4.9164106e-10, 2.5460310e-03,
             0.0000000e+00, -0.0000000e+00, -2.8841635e-03, -2.4777281e-04,
             0.0000000e+00, -0.0000000e+00, 2.1194711e-03, -9.8812522e-04,
             0.0000000e+00, -0.0000000e+00, -1.3183145e-03, -2.5154928e-05,
             0.0000000e+00, -0.0000000e+00, 0.0000000e+00, -0.0000000e+00,
             1.0110294e+00, -8.3096576e-04, 5.1985253e-02, 2.3734723e-05,
             1.0110294e-02, -2.1961753e-01, 4.2502904e-01, 1.9813696e-01,
             5.0554252e-01, 6.4492822e-02, 5.0551468e-01, -6.4592980e-02,
             4.2665440e-01, -1.9894461e-01, 1.8624374e-01, 1.0739919e-01,
             2.7052519e-01, 0.0000000e+00, 1.8624374e-01, -1.0739919e-01,
             1.0048832e-02, 2.1828040e-01, -0.0000000e+00, -2.0878990e-03,
             3.1869202e-03, 4.7819656e-05, -0.0000000e+00, 0.0000000e+00,
             -2.9174720e-03, -1.4939377e-03, 1.6654239e-04, -6.1966013e-04,
             -0.0000000e+00, 0.0000000e+00, -0.0000000e+00, 0.0000000e+00,
             -0.0000000e+00, 0.0000000e+00, -0.0000000e+00, 0.0000000e+00,
             -0.0000000e+00, 0.0000000e+00, -1.1226272e-04, -2.4384859e-03,
             0.0000000e+00, -0.0000000e+00, 1.1059734e-01, 0.0000000e+00,
             -0.0000000e+00, -1.9182914e-03, 1.0000000e+00, 0.0000000e+00,
             0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00,
             0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00,
             0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00,
             1.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00,
             0.0000000e+00, 0.0000000e+00, 0.0000000e+00]
    convert_to_node_features(state)